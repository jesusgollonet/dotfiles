" This must be first, because it changes other options as side effect
set nocompatible

call plug#begin('~/.vim/plugged')

" Make sure you use single quotes
Plug 'junegunn/seoul256.vim'

" js
"Plug 'jelera/vim-javascript-syntax' Highlighting is broken for template
"strings 
Plug 'pangloss/vim-javascript'
Plug 'posva/vim-vue'
"Plug 'Quramy/vim-js-pretty-template'
Plug 'nathanaelkane/vim-indent-guides'
Plug 'Raimondi/delimitMate'
Plug 'scrooloose/syntastic'
" html/css
Plug 'mattn/emmet-vim'
Plug 'mustache/vim-mustache-handlebars'
Plug 'groenewege/vim-less'
Plug 'digitaltoad/vim-pug'
" elm
Plug 'elmcast/elm-vim'
" elm
Plug 'raichoo/purescript-vim'

" rust
Plug 'rust-lang/rust.vim'
" json
Plug 'elzr/vim-json'
" yaml
Plug 'stephpy/vim-yaml'
" jenkins
Plug 'martinda/Jenkinsfile-vim-syntax'
" general
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'airblade/vim-gitgutter'
Plug 'scrooloose/nerdcommenter'
Plug 'tpope/vim-surround'
Plug 'sbdchd/neoformat'
Plug 'prettier/vim-prettier', { 'do': 'yarn install' }
Plug 'editorconfig/editorconfig-vim'

"Plug 'suan/vim-instant-markdown'
Plug 'reedes/vim-pencil'

Plug 'junegunn/goyo.vim'
Plug 'junegunn/vim-xmark', { 'do': 'make' }

Plug 'hashivim/vim-terraform'
Plug 'vim-scripts/indentpython.vim'

Plug 'goodell/vim-mscgen'
Plug 'supercollider/scvim'

Plug 'jparise/vim-graphql'
Plug 'yuezk/vim-js'
Plug 'maxmellon/vim-jsx-pretty'
Plug 'leafgarland/typescript-vim'
Plug 'neoclide/coc.nvim', {'branch': 'release'}

Plug 'tpope/vim-liquid'
Plug 'jvirtanen/vim-hcl'
Plug 'hashivim/vim-packer'

Plug 'z0mbix/vim-shfmt', { 'for': 'sh' }
" Add plugins to &runtimepath
call plug#end()

" show line numbers
set number

" If installed using git
"set rtp+=~/.fzf

" general prefs
set t_Co=256
let g:seoul256_background = 234

colorscheme seoul256

syntax on
filetype on
filetype plugin indent on
au BufNewFile,BufRead *.dust set filetype=html
au BufNewFile,BufRead *.liquid set filetype=liquid
"au FileType javascript JsPreTmpl html
au BufRead,BufNewFile *.md setlocal textwidth=80


" key mappings ---------------------------
let mapleader = ","
" clear search
map <leader>c :nohlsearch<CR>
" source global vim
map <leader>s :so ~/.vimrc<CR>
" source project specific vimrc
map <leader>sl :so .vimrc.local<CR>


" new file in current dir
map <leader>nf :e! <C-R>=expand("%:h")<CR>/
" rename file in current dir
map <leader>mf :!mv <C-R>=expand("%")<CR> <C-R>=expand("%:h")<CR>/
" new folder in current dir
map <leader>nF :!mkdir <C-R>=expand("%:h")<CR>/
" git
" blame current file
map <leader>gb :!git blame %<CR>
" diff current file
map <leader>gd :silent !git diff %<CR> :redraw!<Cr>
map <leader>gD :silent !git diff<CR> :redraw!<Cr>
" open current file in system default program
map <leader>o :!open %<CR>
" open current directory
map <leader>O :!open <C-R>=expand("%:h")<CR><Cr>
" f12 sends vim to background
map <F12> <C-z>
" disable arrow keys!
inoremap  <Up>     <NOP>
inoremap  <Down>   <NOP>
inoremap  <Left>   <NOP>
inoremap  <Right>  <NOP>
noremap   <Up>     <NOP>
noremap   <Down>   <NOP>
noremap   <Left>   <NOP>
noremap   <Right>  <NOP>
inoremap  <C-C>    <NOP>


" vim split navigation
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>


" FZF config
nnoremap <silent> <C-t> :Files<CR>
nnoremap <silent> <C-b> :Buffers<CR>

" open splits where it makes sense
set splitbelow
set splitright

" line numbers
set number
" allow unwritten buffers to be 'closed'
set hidden
" open splits to the right
set splitright
" show filename in status bar
set laststatus=2
" highlight cursor
set cursorline
" ignore case when searching
set ignorecase    
" ignore case if search pattern is all lowercase,
set smartcase     
" highlight search
set hlsearch
" show first search match as you type
set incsearch
" dont use swap files
set noswapfile
" dont wrap lines
set nowrap
" show newlines as $
set list
" osx clipboard
set clipboard=unnamed
" 4 spaces by default
set smartindent
set tabstop=4
set shiftwidth=4
set expandtab

set encoding=utf-8

set updatetime=100

" load a local vimrc file if it exists
if filereadable(".vimrc.local")
    source .vimrc.local
endif
" config ----------
" syntastic
let g:syntastic_javascript_checkers = ['eslint']
let g:syntastic_javascript_eslint_exec = 'eslint_d'
"let g:syntastic_check_on_open=1
let g:syntastic_always_populate_loc_list=1
"let g:syntastic_auto_loc_list=1

let g:omni_sql_no_default_maps = 1

let g:elm_format_autosave = 1

let g:prettier#config#parser = 'babylon'
let g:prettier#autoformat = 0
autocmd BufWritePre *.html,*.js,*.mjs,*.json,*.css,*.scss,*.less,*.vue,*.graphql Neoformat

" vim-terraform
let g:terraform_align=1
let g:terraform_fmt_on_save=1

" rust
let g:rustfmt_autosave = 1
let g:syntastic_rust_checkers = ['rustc']
let g:shfmt_fmt_on_save = 1
let g:shfmt_extra_args = '-i 2'

" scvim
"let g:scFlash = 1
"let g:scTerminalBuffer = "on" 
"let g:scSplitDirection = "h" 
"let g:scSplitSize = 40 
" CoC extensions
let g:coc_global_extensions = ['coc-tsserver']
