#!/bin/zsh

case "$(uname -s)" in
  Linux) eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
esac

# zmodload zsh/zprof

fpath+=("$(brew --prefix)/share/zsh/site-functions")

fpath+=($HOME/.zsh/pure)

autoload -Uz promptinit
promptinit
# Only set prompt pure if available
if (( ${+functions[prompt]} )); then
    prompt pure 2>/dev/null || true
fi

autoload -Uz compinit
# Optimize compinit with caching - only rebuild if dump is older than 24h
for dump in ~/.zcompdump(N.mh+24); do
  compinit
done
compinit -C

# history search with arrows 
autoload -U up-line-or-beginning-search
autoload -U down-line-or-beginning-search
zle -N up-line-or-beginning-search
zle -N down-line-or-beginning-search

# Enable Ctrl-x-e to edit command line
autoload -U edit-command-line
# # Emacs style
zle -N edit-command-line
bindkey '^xe' edit-command-line
bindkey '^x^e' edit-command-line

# ignore case in completion
zstyle ':completion:*' matcher-list '' 'm:{a-z}={A-Z}' '+m:{A-Z}={a-z}'

. ~/.dotfiles/zsh/keys
. ~/.dotfiles/zsh/functions
. ~/.dotfiles/zsh/setopt

HISTSIZE=10000
SAVEHIST=10000
HISTFILE=~/.history

# add bin to path
export PATH=~/.bin:$PATH
export PATH=~/.dotfiles/bin:$PATH
export PATH=~/.local/bin:$PATH

# enable fzf
source <(fzf --zsh)
# note in order for key commands to work on fzf we need to $(brew --prefix)/opt/fzf/install
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# Move next only if `homebrew` is installed
if command -v brew >/dev/null 2>&1; then
    # Load rupa's z if installed
    [ -f $(brew --prefix)/etc/profile.d/z.sh ] && source $(brew --prefix)/etc/profile.d/z.sh
fi

# Setting ag as the default source for fzf
export FZF_DEFAULT_COMMAND='ag --hidden --ignore .git -g ""'
# To apply the command to CTRL-T as well
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
# Mosh needs locale 
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
export LANGUAGE=en_US.UTF-8
#
export EDITOR=vim 

# gh cli needs needs a style to be visible in dark mode  (markdown renderer is glamour)
export GLAMOUR_STYLE=dracula

export NVM_DIR="$HOME/.nvm"
# Lazy-load NVM - only loads when nvm command is used
nvm() {
    unset -f nvm
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
    [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
    nvm "$@"
}

# Initialize atuin history search immediately - only if atuin is available
if command -v atuin >/dev/null 2>&1; then
    eval "$(atuin init zsh)"
fi

# ghcup-env - cross-platform paths
[ -f "$HOME/.ghcup/env" ] && . "$HOME/.ghcup/env" # ghcup-env

# Deno - cross-platform paths
export DENO_INSTALL="$HOME/.deno"
export PATH="$DENO_INSTALL/bin:$PATH"

# Lazy-load direnv - only loads when direnv command is used or entering directories with .envrc
direnv() {
    unset -f direnv
    eval "$(command direnv hook zsh)"
    direnv "$@"
}

# pnpm
case "$(uname -s)" in
  Darwin) export PNPM_HOME="$HOME/Library/pnpm" ;;
  Linux)  export PNPM_HOME="$HOME/.local/share/pnpm" ;;
esac
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac
# pnpm end

# Google Cloud SDK - cross-platform paths
if [ -f "$HOME/google-cloud-sdk/path.zsh.inc" ]; then . "$HOME/google-cloud-sdk/path.zsh.inc"; fi
if [ -f "$HOME/google-cloud-sdk/completion.zsh.inc" ]; then . "$HOME/google-cloud-sdk/completion.zsh.inc"; fi

# bun completions - cross-platform paths  
[ -s "$HOME/.bun/_bun" ] && source "$HOME/.bun/_bun"

# bun
export BUN_INSTALL="$HOME/.bun"
export PATH="$BUN_INSTALL/bin:$PATH"
export PYENV_ROOT="$HOME/.pyenv"
[[ -d $PYENV_ROOT/bin ]] && export PATH="$PYENV_ROOT/bin:$PATH"
# Lazy-load pyenv - only loads when python/pyenv commands are used
pyenv() {
    unset -f pyenv python pip
    eval "$(command pyenv init - zsh)"
    pyenv "$@"
}
python() {
    unset -f pyenv python pip
    eval "$(command pyenv init - zsh)"
    python "$@"
}
pip() {
    unset -f pyenv python pip
    eval "$(command pyenv init - zsh)" 
    pip "$@"
}

# opencode - cross-platform paths
export PATH="$HOME/.opencode/bin:$PATH"
# zprof

# fnm - cross-platform paths
case "$(uname -s)" in
  Darwin) FNM_PATH="$HOME/Library/Application Support/fnm" ;;
  Linux)  FNM_PATH="$HOME/.local/share/fnm" ;;
esac
if [ -d "$FNM_PATH" ]; then
  export PATH="$FNM_PATH:$PATH"
  eval "`fnm env`"
fi

case "$(uname -s)" in
  Linux) . "$HOME/.atuin/bin/env"
esac
eval "$(zoxide init zsh)"
